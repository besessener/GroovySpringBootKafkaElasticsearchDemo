plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'groovy'
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.3.2"
    id "org.openapi.generator" version "5.1.1"
}

apply plugin: "com.github.johnrengelman.processes"
apply plugin: "org.springdoc.openapi-gradle-plugin"
apply plugin: 'org.openapi.generator'

group = 'me.spring'
version = '0.1'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation("org.openapitools:openapi-generator-gradle-plugin:5.1.1") {
        exclude module: "slf4j-simple"
    }
    implementation('org.springframework.boot:spring-boot-starter-data-elasticsearch')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.codehaus.groovy:groovy'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

test {
    useJUnitPlatform()
}

openApi {
    outputDir.set(file("$buildDir/generated/docs"))
    outputFileName.set("api-definition.yaml")
    waitTimeInSeconds.set(15)
}

openApiGenerate {
    generatorName = "asciidoc"
    inputSpec = "$buildDir/generated/docs/api-definition.yaml".toString()
    outputDir = "$buildDir/generated/docs".toString()
    configOptions = [
            dateLibrary    : "java8",
            appDescription : "This is a demo for OpenApi with Groovy",
            appName        : project.name,
            useIntroduction: "true"
    ]
}

task openApiGroovy(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "groovy"
    inputSpec = "$buildDir/generated/docs/api-definition.yaml".toString()
    outputDir = "$buildDir/generated/sources".toString()
}

build.dependsOn(['openApiGenerate', 'openApiGroovy'])
tasks.openApiGenerate.dependsOn('generateOpenApiDocs')
tasks.openApiGroovy.dependsOn('generateOpenApiDocs')
